// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Raleway-Regular.ttf`.
    static let ralewayRegularTtf = FileResource(bundle: _R.hostingBundle, name: "Raleway-Regular", pathExtension: "ttf")
    
    /// `bundle.URLForResource("Raleway-Regular", withExtension: "ttf")`
    static func ralewayRegularTtf(_: Void) -> NSURL? {
      let fileResource = R.file.ralewayRegularTtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font {
    /// Font `Raleway-Regular`.
    static let ralewayRegular = FontResource(fontName: "Raleway-Regular")
    
    /// `UIFont(name: "Raleway-Regular", size: ...)`
    static func ralewayRegular(size size: CGFloat) -> UIFont? {
      return UIFont(resource: ralewayRegular, size: size)
    }
    
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `gift-1`.
    static let gift1 = ImageResource(bundle: _R.hostingBundle, name: "gift-1")
    /// Image `gift-2`.
    static let gift2 = ImageResource(bundle: _R.hostingBundle, name: "gift-2")
    /// Image `gift-3`.
    static let gift3 = ImageResource(bundle: _R.hostingBundle, name: "gift-3")
    /// Image `heart`.
    static let heart = ImageResource(bundle: _R.hostingBundle, name: "heart")
    /// Image `icon-close`.
    static let iconClose = ImageResource(bundle: _R.hostingBundle, name: "icon-close")
    /// Image `icon-gift`.
    static let iconGift = ImageResource(bundle: _R.hostingBundle, name: "icon-gift")
    /// Image `icon-like`.
    static let iconLike = ImageResource(bundle: _R.hostingBundle, name: "icon-like")
    
    /// `UIImage(named: "gift-1", bundle: ..., traitCollection: ...)`
    static func gift1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.gift1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "gift-2", bundle: ..., traitCollection: ...)`
    static func gift2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.gift2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "gift-3", bundle: ..., traitCollection: ...)`
    static func gift3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.gift3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.heart, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon-close", bundle: ..., traitCollection: ...)`
    static func iconClose(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconClose, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon-gift", bundle: ..., traitCollection: ...)`
    static func iconGift(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconGift, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon-like", bundle: ..., traitCollection: ...)`
    static func iconLike(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconLike, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `GiftDisplayView`.
    static let giftDisplayView = _R.nib._GiftDisplayView()
    
    /// `UINib(name: "GiftDisplayView", bundle: ...)`
    static func giftDisplayView(_: Void) -> UINib {
      return UINib(resource: R.nib.giftDisplayView)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `AudienceViewController`, and contains static references to 1 segues.
    struct audienceViewController {
      /// Segue identifier `overlay`.
      static let overlay: StoryboardSegueIdentifier<UIStoryboardSegue, AudienceViewController, LiveOverlayViewController> = StoryboardSegueIdentifier(identifier: "overlay")
      
      /// Optionally returns a typed version of segue `overlay`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func overlay(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, AudienceViewController, LiveOverlayViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.audienceViewController.overlay, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `BroadcasterViewController`, and contains static references to 1 segues.
    struct broadcasterViewController {
      /// Segue identifier `overlay`.
      static let overlay: StoryboardSegueIdentifier<UIStoryboardSegue, BroadcasterViewController, LiveOverlayViewController> = StoryboardSegueIdentifier(identifier: "overlay")
      
      /// Optionally returns a typed version of segue `overlay`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func overlay(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, BroadcasterViewController, LiveOverlayViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.broadcasterViewController.overlay, segue: segue)
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "io.ltebean.Live") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _GiftDisplayView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "GiftDisplayView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationController
      
      let audience = StoryboardViewControllerResource<AudienceViewController>(identifier: "audience")
      let broadcast = StoryboardViewControllerResource<BroadcasterViewController>(identifier: "broadcast")
      let bundle = _R.hostingBundle
      let giftChooser = StoryboardViewControllerResource<GiftChooserViewController>(identifier: "giftChooser")
      let name = "Main"
      
      func audience(_: Void) -> AudienceViewController? {
        return UIStoryboard(resource: self).instantiateViewController(audience)
      }
      
      func broadcast(_: Void) -> BroadcasterViewController? {
        return UIStoryboard(resource: self).instantiateViewController(broadcast)
      }
      
      func giftChooser(_: Void) -> GiftChooserViewController? {
        return UIStoryboard(resource: self).instantiateViewController(giftChooser)
      }
      
      static func validate() throws {
        if UIImage(named: "gift-3") == nil { throw ValidationError(description: "[R.swift] Image named 'gift-3' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "gift-2") == nil { throw ValidationError(description: "[R.swift] Image named 'gift-2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon-gift") == nil { throw ValidationError(description: "[R.swift] Image named 'icon-gift' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon-like") == nil { throw ValidationError(description: "[R.swift] Image named 'icon-like' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "gift-1") == nil { throw ValidationError(description: "[R.swift] Image named 'gift-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon-close") == nil { throw ValidationError(description: "[R.swift] Image named 'icon-close' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().broadcast() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'broadcast' could not be loaded from storyboard 'Main' as 'BroadcasterViewController'.") }
        if _R.storyboard.main().audience() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'audience' could not be loaded from storyboard 'Main' as 'AudienceViewController'.") }
        if _R.storyboard.main().giftChooser() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'giftChooser' could not be loaded from storyboard 'Main' as 'GiftChooserViewController'.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}